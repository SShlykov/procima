// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SShlykov/procima/procima/internal/integration/http/v1/controller (interfaces: ImageService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_image_service.go -package=mocks github.com/SShlykov/procima/procima/internal/integration/http/v1/controller ImageService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/SShlykov/procima/procima/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockImageService is a mock of ImageService interface.
type MockImageService struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceMockRecorder
}

// MockImageServiceMockRecorder is the mock recorder for MockImageService.
type MockImageServiceMockRecorder struct {
	mock *MockImageService
}

// NewMockImageService creates a new mock instance.
func NewMockImageService(ctrl *gomock.Controller) *MockImageService {
	mock := &MockImageService{ctrl: ctrl}
	mock.recorder = &MockImageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageService) EXPECT() *MockImageServiceMockRecorder {
	return m.recorder
}

// ProcessImage mocks base method.
func (m *MockImageService) ProcessImage(arg0 context.Context, arg1 models.RequestImage) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessImage", arg0, arg1)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessImage indicates an expected call of ProcessImage.
func (mr *MockImageServiceMockRecorder) ProcessImage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessImage", reflect.TypeOf((*MockImageService)(nil).ProcessImage), arg0, arg1)
}
