// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SShlykov/procima/procima/internal/integration/http/v1/controller (interfaces: ImageController)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_image_controller.go -package=mocks github.com/SShlykov/procima/procima/internal/integration/http/v1/controller ImageController
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockImageController is a mock of ImageController interface.
type MockImageController struct {
	ctrl     *gomock.Controller
	recorder *MockImageControllerMockRecorder
}

// MockImageControllerMockRecorder is the mock recorder for MockImageController.
type MockImageControllerMockRecorder struct {
	mock *MockImageController
}

// NewMockImageController creates a new mock instance.
func NewMockImageController(ctrl *gomock.Controller) *MockImageController {
	mock := &MockImageController{ctrl: ctrl}
	mock.recorder = &MockImageControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageController) EXPECT() *MockImageControllerMockRecorder {
	return m.recorder
}

// ProcessImage mocks base method.
func (m *MockImageController) ProcessImage(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessImage", arg0)
}

// ProcessImage indicates an expected call of ProcessImage.
func (mr *MockImageControllerMockRecorder) ProcessImage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessImage", reflect.TypeOf((*MockImageController)(nil).ProcessImage), arg0)
}
